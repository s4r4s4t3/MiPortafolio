#üìÇ Ejercicios D√≠a 9: Archivos en Python (Lectura y Escritura)
#üü¢ Nivel 1: B√°sicos
#1Ô∏è‚É£ Crear y escribir en un archivo

#1- Pedile al usuario que ingrese su nombre y edad.Guard√° esa informaci√≥n en un archivo llamado datos_personales.txt.

#Pedimos la informaci√≥n al usuario.
nombre = input("Ingres√° tu nombre: ")
edad = int(input("Ingres√° tu edad: "))
#Abrimos un archivo en modo de escritura.
with open("datos_personales.txt", "w") as archivo:
    archivo.write(f"Nombre: {nombre}, Edad: {edad}")
#Mostramos un mensaje de √©xito.
print("La informaci√≥n se guardo correctamente!")


#2Ô∏è‚É£ Leer un archivo existente. Cre√° un archivo llamado mensaje.txt con el texto: "Hola! Este es un mensaje secreto."Luego, desde tu c√≥digo Python, abrilo y mostr√° el contenido por pantalla.

#Esto nos dice desde qu√© carpeta Python intenta acceder al archivo.
#import os
#print("Estoy parado en:", os.getcwd())

#Leer un archivo existente.

archivo = open("mensaje.txt", "r")
#Creamos una variable que se encarga de leer el archivo.
contenido = archivo.read()
#Mostramos el resultado.
print(contenido)
# Alternativa recomendada: usar with open() para que Python cierre el archivo autom√°ticamente.
archivo.close()


#3Ô∏è‚É£ Guardar varios inputs en un archivo: Ped√≠ al usuario que escriba tres frases.Guardalas en un archivo llamado frases.txt, una por l√≠nea.

#Pedimos las tres frases al usuario.
frase1 = input("Por favor ingres√° la primera frase: ")
frase2 = input("Por favor ingres√° la segunda frase: ")
frase3 = input("Por favor ingres√° la tercera frase: ")
#Creamos una variable para abrir el archivo.
archivo = open("frases.txt", "a")
#Agregamos la informaci√≥n al archivo existente con archivo.write.
archivo.write(f"\n La primera frase es: {frase1}.\n La segunda frase es: {frase2}.\n La tercera frase es: {frase3}.")
#Cerramos el archivo.
archivo.close()
#Otra alternativa de resolverlo sin un f-string ser√≠a la siguiente:
#archivo.write(frase1 + "\n")
#archivo.write(frase2 + "\n")
#archivo.write(frase3 + "\n")
#Si el archivo est√° vac√≠o, podemos evitar el primer salto de l√≠nea.


#üü° Nivel 2: Con bucles y listas
#4Ô∏è‚É£ Guardar una lista de nombres

#Cre√° una lista con 5 nombres (pueden ser fijos o ped√≠rselos al usuario).Guard√° todos esos nombres en un archivo llamado nombres.txt, uno por l√≠nea.

# Creamos una lista con 5 nombres (pueden ser fijos o ingresados por el usuario)
lista_nombres = ["juan", "pedro", "pablo", "ezequiel", "ramon"]

# Abrimos el archivo 'nombres.txt' en modo escritura (esto crea el archivo si no existe)
# El modo 'w' sobreescribe el contenido si el archivo ya tiene algo.
archivo = open("nombres.txt", "w")

# Recorremos la lista nombre por nombre
for nombre in lista_nombres:
    # Escribimos cada nombre seguido de un salto de l√≠nea para que se guarde en l√≠neas separadas
    archivo.write(nombre + "\n")

# Cerramos el archivo para guardar los cambios correctamente
archivo.close()


#5Ô∏è‚É£ Leer l√≠nea por l√≠nea con un bucle: Abr√≠ el archivo nombres.txt y, usando un bucle, imprim√≠ cada nombre agregando delante el texto: "Nombre:". Resultado esperado (si por ejemplo hay "Juan", "Pedro")

#Abrimos el archivo utilizando with open().
with open("nombres.txt", "r") as archivo:
    #Recorremos el archivo con un bucle for para iterar sobre cada l√≠nea dentro de nuestro archivo.
    for i in archivo:
        #Mostramos el resultado.
        print(f"Nombre: {i.strip()}")



#6Ô∏è‚É£ Crear un archivo de tabla de multiplicar: Ped√≠ al usuario un n√∫mero del 1 al 10. Gener√° la tabla de multiplicar de ese n√∫mero y guardala en tabla.txt.
#Ejemplo (si el usuario pone 3):
#python-repl
#Copiar c√≥digo
#3 x 1 = 3  
#3 x 2 = 6  

# Pedimos un n√∫mero al usuario
entrada = int(input("Ingres√° un n√∫mero del 1 al 10 para hacer su tabla de multiplicar: "))

# Abrimos el archivo en la carpeta "semana-dos" en modo escritura.
with open("semana-dos/tabla.txt", "w") as archivo:
    # Recorremos los n√∫meros del 1 al 10.
    for i in range(1, 11):
        # Escribimos cada l√≠nea de la tabla.
        archivo.write(f"{entrada} x {i} = {entrada * i}\n")


 
#üîµ Nivel 3: Condicionales y control de flujo + archivos

#7Ô∏è‚É£ Filtro de frases largas: Ped√≠ 5 frases al usuario. Guard√° solo las frases que tengan m√°s de 20 caracteres en un archivo frases_largas.txt.

#Abrimos el archivo frases_largas.txt en modo escritura, "w" dentro de la carpeta semana dos.
#Si el archivo no existe, se crea; si existe, se sobreescribe.

with open("semana-dos/frases_largas.txt", "w") as archivo:
    #Usamos un bucle for para repetir 5 veces (Una vez por frase a ingresar).
    for i in range(1, 6):
        #Pedimos al usuario que ingrese una frase.
        frase = input("Ingres√° una frases larga: ")
        #Verificamos si la frase tiene m√°s de 20 caracteres
        if len(frase) > 20:
            #Si la frase es suficientemente larga, la escribimos en el archivo con un salto de l√≠nea.
            archivo.write(frase + "\n")



#8Ô∏è‚É£ Registro de intentos fallidos: Hac√© un mini juego donde el usuario tiene que adivinar un n√∫mero entre 1 y 5.
#Cada vez que falle, guard√° el intento incorrecto en un archivo errores.txt.
#Cuando acierte, mostr√° cu√°ntos intentos fallidos hizo.

import random  # Importamos para generar el n√∫mero aleatorio

# Generamos un n√∫mero aleatorio entre 1 y 5
numero_secreto = random.randint(1, 5)

# Inicializamos el contador de fallos
intentos_fallidos = 0

# Abrimos el archivo errores.txt en modo escritura ('w')
# Si ya existe, se sobreescribe; si no, se crea
with open("semana-dos/errores.txt", "w") as archivo:
    
    while True:
        # Pedimos al usuario que adivine un n√∫mero entre 1 y 5
        intento = int(input("Adivin√° un n√∫mero entre 1 y 5: "))
        
        # Verificamos si acert√≥
        if intento == numero_secreto:
            print(f"¬°Correcto! Adivinaste el n√∫mero. Fallaste {intentos_fallidos} vez/veces antes de acertar.")
            break  # Salimos del bucle
        else:
            print("Incorrecto. Prob√° de nuevo.")
            intentos_fallidos += 1  # Sumamos un fallo
            archivo.write(f"Intento fallido: {intento}\n")  # Registramos el fallo en el archivo



#üü£ Nivel 4: Lectura y procesamiento

#9Ô∏è‚É£ Contador de l√≠neas: Le√© el archivo nombres.txt que hiciste antes.Cont√° cu√°ntas l√≠neas tiene (es decir, cu√°ntos nombres hay) y mostrale al usuario:
#Ejemplo: "El archivo tiene 5 nombres."

# Abrimos el archivo en modo lectura
with open("semana-dos/nombres.txt", "r") as archivo:
    
    # Leemos todas las l√≠neas del archivo y las guardamos en una lista
    lineas = archivo.readlines()
    
    # Contamos cu√°ntas l√≠neas hay (es decir, cu√°ntos nombres)
    cantidad_nombres = len(lineas)

# Mostramos el resultado al usuario
print(f"El archivo tiene {cantidad_nombres} nombre(s).")



#10Ô∏è‚É£ Buscador de palabras clave: En un archivo notas.txt, guard√° 5 frases sobre cualquier tema.Luego pedile al usuario que escriba una palabra clave.Mostrale todas las l√≠neas del archivo donde aparezca esa palabra.
#Ejemplo:
#Si la palabra clave es "Python" y hay una l√≠nea que dice "Me gusta programar en Python", entonces mostrala.

# Abrimos el archivo notas.txt en modo lectura
with open("semana-dos/notas.txt", "r", encoding='utf-8') as archivo:
    
    # Leemos todas las l√≠neas del archivo
    lineas = archivo.readlines()

# Pedimos al usuario una palabra clave para buscar
clave = input("Ingres√° una palabra clave para buscar en las frases: ")

# Recorremos cada l√≠nea del archivo
for linea in lineas:
    
    # Verificamos si la palabra clave est√° dentro de la l√≠nea (sin distinguir may√∫sculas/min√∫sculas)
    if clave.lower() in linea.lower():
        
        # Si la contiene, la mostramos
        print(f"Coincidencia encontrada: {linea.strip()}")




#üü§ Nivel 5: Reto Divertido del D√≠a

#11Ô∏è‚É£ Tu Diario Secreto üóùÔ∏è
#Cada vez que el usuario ejecute el programa, que pueda escribir una entrada nueva en su diario (una frase o p√°rrafo).
#El programa debe guardar todas las entradas en el archivo diario.txt, agreg√°ndolas una debajo de la otra (modo append).
#Opcional: Al final pod√©s agregar un comando que muestre todo el diario completo.

# üë§ Paso 1: Pedimos al usuario que escriba algo para su diario
# Puede ser una frase, un pensamiento, una idea del d√≠a, etc.
entrada = input("Escrib√≠ tu entrada de hoy para el diario: ")

# üìÅ Paso 2: Abrimos (o creamos) el archivo 'diario.txt' en modo 'append'
# Esto significa que agregaremos contenido al final del archivo sin borrar lo que ya exist√≠a
with open("semana-dos/diario.txt", "a", encoding='UTF-8') as archivo:
    # ‚úçÔ∏è Paso 3: Escribimos la entrada seguida de un salto de l√≠nea para que quede separada
    archivo.write(entrada + "\n")

# üßê Paso 4: Preguntamos al usuario si quiere ver todo su diario completo
# Le damos la opci√≥n con una respuesta tipo 's' para s√≠, o cualquier otra para no
ver_diario = input("¬øQuer√©s ver todo tu diario completo? (s/n): ")

# üñºÔ∏è Paso 5: Si el usuario respondi√≥ 's' (min√∫scula o may√∫scula), mostramos el contenido entero
if ver_diario.lower() == "s":
    print("\nüìñ Tu diario completo:\n")  # Encabezado visual simp√°tico
    # üìñ Abrimos el archivo nuevamente, esta vez en modo lectura
    with open("semana-dos/diario.txt", "r") as archivo:
        # üëÅÔ∏è Mostramos todo el contenido del archivo en pantalla
        print(archivo.read())